#!/usr/bin/env python

from anyascii import anyascii
import argparse
import json
import os
from ruvnaveidar_utils import *
import sys
import subprocess

if __name__ == '__main__':
  parser = argparse.ArgumentParser()

  parser.add_argument('-l', '--list', help = 'Only list all RÚV programs.', action = 'store_true')
  parser.add_argument('-o', '--output', help = 'Output directory for downloads.', default = 'out')
  parser.add_argument('-r', '--run', help = 'Set to run commands (by default, commands are printed)',
                      action = 'store_true')
  parser.add_argument('-v', '--verbose', help = 'Set to print more verbose messages', action = 'store_true')

  args = parser.parse_args()
  pid2fix = read_pid2fix('pid2fix.tsv')
  blacklist = read_file_list('blacklist.txt')
  whitelist = list(read_file_list('whitelist.txt'))

  if len(whitelist) == 0:
    print("WARNING: Did not find any shows to fetch in 'whitelist.txt'. See README for more details.")
    sys.exit()

  api_data = fetch_programs()
  seen_pids = set() # Note which programs have been checked

  if not os.path.exists(args.output):
    os.makedirs(args.output)

  for panel in api_data:
    # panel["format"] is either "tv" or "radio". All radio streams are ignored
    if panel['format'] != 'tv':
      continue

    pid = panel['id']

    if pid in seen_pids:
      continue

    seen_pids.add(pid)

    if args.list:
      print(panel['id'], panel['title'])
      continue

    p_title = trim_season_number_suffix(panel['title'])

    if not is_title_in_list(whitelist, p_title):
      continue

    if args.verbose:
      print('#Matched "{}"'.format(p_title))
    ruv_api_program = 'https://api.ruv.is/api/programs/program/{}/all'.format(pid)
    p_r = get_url(ruv_api_program)

    if str(p_r) == '<Response [404]>':
      ruv_api_program2 = 'https://api.ruv.is/api/programs/get_ids/{}'.format(pid)
      p_r = get_url(ruv_api_program2)
      if str(p_r) == '<Response [404]>':
        continue

    try:
      p_data = p_r.json()
    except:
      print('ERROR: Failed reading JSON data from RÚV for pid={}'.format(pid))
      raise

    p_data = p_data['programs'] if 'programs' in p_data else p_data
    p_data = p_data if isinstance(p_data, list) else [p_data]

    for program in p_data:
      #print(pid, p_title)
      if str(pid) in pid2fix:
        #print("DEBUG1!", pid2fix[str(pid)])
        title_with_season = pid2fix[str(pid)]
      else:
        #print("DEBUG1!", str(pid))
        season_num = get_season_number_suffix(panel['title'])

        if season_num == '99':
          season_num = str(pid)

        if "foreign_title" in program and program['foreign_title']:
          title_with_season = trim_season_number_suffix(program['foreign_title']) + ' S' + season_num
        else:
          title_with_season = p_title + ' S' + season_num

      for episode in program['episodes']:
        eid = episode['id']
        full_id = '{}-{}'.format(pid, eid)

        if full_id in blacklist:
          continue

        ep_num = str(episode['number']).zfill(2)
        out_fn = args.output + '/' + title_with_season
        out_fn += 'E{} - {}.ts'.format(ep_num, episode['title'])

        if args.run:
          streamlink_cmd = ['streamlink',
                            '--quiet',
                            '--output',
                            anyascii(out_fn),
                            anyascii(episode['file']),
                            'best']

          streamlink_ret = subprocess.run(streamlink_cmd)

          if streamlink_ret.returncode != 0:
            raise Exception("ERROR: streamlink command: " + " ".join(streamlink_cmd) +
                            "failed with message:\n{}".format(streamlink_ret.stderr))

          with open('blacklist.txt', 'a') as blacklist_f:
            print('{}-{}'.format(pid, eid), file = blacklist_f, end = '\n')
        else:
          print('streamlink --quiet --output ', end = '')
          print('"{}" {} best'.format(anyascii(out_fn), anyascii(episode['file'])), end = '')
          print(' && echo {}-{} >> blacklist.txt'.format(pid, eid))
